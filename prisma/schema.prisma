datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  manager
  customer

  @@map("user_role")
}

enum OrderStatus {
  pending
  canceled
  processing
  delivering
  delivered

  @@map("order_status")
}

model User {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  role      UserRole @default(customer)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  restaurantsManaged Restaurant[] @relation("ManagerRestaurants")
  orders             Order[]      @relation("CustomerOrders")
  evaluations        Evaluation[]
  authLinks          AuthLink[]

  @@map("users")
}

model Restaurant {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(500)
  slug        String   @db.VarChar(100)
  managerId   String?  @db.VarChar(30)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)

  manager     User?        @relation("ManagerRestaurants", fields: [managerId], references: [id], onDelete: SetNull)
  categories  Category[]
  products    Product[]
  orders      Order[]
  evaluations Evaluation[]

  @@index([managerId])
  @@map("restaurants")
}

model Category {
  id           String   @id @default(cuid()) @db.VarChar(30)
  name         String   @db.VarChar(50)
  description  String?  @db.VarChar(300)
  restaurantId String   @db.VarChar(30)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products   Product[]

  @@unique([restaurantId, name])
  @@map("categories")
}

model Product {
  id           String   @id @default(cuid()) @db.VarChar(30)
  name         String   @db.VarChar(100)
  description  String?  @db.VarChar(500)
  priceInCents Int
  photoUrl     String?  @db.VarChar(500)
  active       Boolean  @default(true)
  categoryId   String   @db.VarChar(30)
  restaurantId String   @db.VarChar(30)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)

  category         Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  restaurant       Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  ingredients      Ingredient[]
  complementGroups ComplementGroup[]
  orderItems       OrderItem[]

  @@index([restaurantId])
  @@map("products")
}

model Ingredient {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @db.VarChar(100)
  productId String   @db.VarChar(30)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("ingredients")
}

model Complement {
  id                String   @id @default(cuid()) @db.VarChar(30)
  name              String   @db.VarChar(100)
  priceInCents      Int?
  description       String?  @db.VarChar(300)
  complementGroupId String   @db.VarChar(30)
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  updatedAt         DateTime @updatedAt @db.Timestamp(0)

  group ComplementGroup @relation(fields: [complementGroupId], references: [id], onDelete: Cascade)

  orderItemComplements OrderItemComplement[]

  @@index([complementGroupId])
  @@map("complements")
}

model ComplementGroup {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @db.VarChar(100)
  mandatory Boolean  @default(false)
  min       Int      @db.SmallInt
  max       Int      @db.SmallInt
  productId String   @db.VarChar(30)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  complements Complement[]

  @@index([productId])
  @@map("complement_groups")
}

model Order {
  id           String      @id @default(cuid()) @db.VarChar(30)
  status       OrderStatus @default(pending)
  customerId   String      @db.VarChar(30)
  restaurantId String      @db.VarChar(30)
  createdAt    DateTime    @default(now()) @db.Timestamp(0)
  updatedAt    DateTime    @updatedAt @db.Timestamp(0)

  customer   User        @relation("CustomerOrders", fields: [customerId], references: [id])
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems OrderItem[]

  @@index([customerId])
  @@index([restaurantId])
  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid()) @db.VarChar(30)
  orderId      String   @db.VarChar(30)
  productId    String?  @db.VarChar(30)
  quantity     Int      @default(1) @db.SmallInt
  priceInCents Int
  observations String?  @db.VarChar(500)
  createdAt    DateTime @default(now()) @db.Timestamp(0)

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  selectedComplements OrderItemComplement[]

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model OrderItemComplement {
  id           String   @id @default(cuid()) @db.VarChar(30)
  orderItemId  String   @db.VarChar(30)
  complementId String   @db.VarChar(30)
  quantity     Int      @default(1) @db.SmallInt
  priceInCents Int
  createdAt    DateTime @default(now()) @db.Timestamp(0)

  orderItem  OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  complement Complement @relation(fields: [complementId], references: [id], onDelete: Restrict)

  @@index([orderItemId])
  @@index([complementId])
  @@map("order_items_complements")
}

model Evaluation {
  id           String   @id @default(cuid()) @db.VarChar(30)
  customerId   String   @db.VarChar(30)
  restaurantId String   @db.VarChar(30)
  rate         Int      @db.SmallInt
  comment      String?  @db.VarChar(1000)
  createdAt    DateTime @default(now()) @db.Timestamp(0)

  customer   User       @relation(fields: [customerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([customerId])
  @@index([restaurantId])
  @@map("evaluations")
}

model AuthLink {
  id        String   @id @default(cuid()) @db.VarChar(30)
  code      String   @unique @db.VarChar(100)
  userId    String   @db.VarChar(30)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("auth_links")
}
